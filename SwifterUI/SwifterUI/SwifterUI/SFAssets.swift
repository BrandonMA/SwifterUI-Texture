//
//  SFAssets.swift
//  SwifterUI
//
//  Created by Brandon Maldonado on 10/09/17.
//  Copyright Â© 2017 . All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class SFAssets : NSObject {

    //// Cache

    private struct Cache {
        static let white: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        static let black: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        static let facebookBlue: UIColor = UIColor(red: 0.231, green: 0.349, blue: 0.596, alpha: 1.000)
        static let orange: UIColor = UIColor(red: 1.000, green: 0.584, blue: 0.000, alpha: 1.000)
        static let blue: UIColor = UIColor(red: 0.000, green: 0.478, blue: 1.000, alpha: 1.000)
        static let green: UIColor = UIColor(red: 0.082, green: 0.843, blue: 0.082, alpha: 1.000)
        static let purple: UIColor = UIColor(red: 0.620, green: 0.239, blue: 1.000, alpha: 1.000)
        static let yellow: UIColor = UIColor(red: 1.000, green: 0.800, blue: 0.000, alpha: 1.000)
        static let blackContrast: UIColor = UIColor(red: 0.169, green: 0.169, blue: 0.176, alpha: 1.000)
        static let whiteContrast: UIColor = UIColor(red: 0.886, green: 0.886, blue: 0.894, alpha: 1.000)
        static let red: UIColor = UIColor(red: 1.000, green: 0.231, blue: 0.188, alpha: 1.000)
        static let alternativeWhite: UIColor = UIColor(red: 0.937, green: 0.937, blue: 0.957, alpha: 1.000)
        static let alternativeBlack: UIColor = UIColor(red: 0.100, green: 0.100, blue: 0.100, alpha: 1.000)
        static let whiteTextField: UIColor = UIColor(red: 0.941, green: 0.941, blue: 0.941, alpha: 1.000)
        static let lightGray: UIColor = UIColor(red: 0.741, green: 0.737, blue: 0.757, alpha: 1.000)
        static let gray: UIColor = UIColor(red: 0.557, green: 0.557, blue: 0.576, alpha: 1.000)
        static let twitterBlue: UIColor = UIColor(red: 0.114, green: 0.631, blue: 0.949, alpha: 1.000)
        static var imageOfMailIcon: UIImage?
        static var mailIconTargets: [AnyObject]?
        static var imageOfLockIcon: UIImage?
        static var lockIconTargets: [AnyObject]?
        static var imageOfPersonIcon: UIImage?
        static var personIconTargets: [AnyObject]?
        static var imageOfTwitterIcon: UIImage?
        static var twitterIconTargets: [AnyObject]?
        static var imageOfFacebookIcon: UIImage?
        static var facebookIconTargets: [AnyObject]?
        static var imageOfGoogleIcon: UIImage?
        static var googleIconTargets: [AnyObject]?
        static var imageOfSearch: UIImage?
        static var searchTargets: [AnyObject]?
        static var imageOfArrowDown: UIImage?
        static var arrowDownTargets: [AnyObject]?
        static var imageOfCloseIcon: UIImage?
        static var closeIconTargets: [AnyObject]?
        static var imageOfCameraIcon: UIImage?
        static var cameraIconTargets: [AnyObject]?
    }

    //// Colors

    @objc dynamic public class var white: UIColor { return Cache.white }
    @objc dynamic public class var black: UIColor { return Cache.black }
    @objc dynamic public class var facebookBlue: UIColor { return Cache.facebookBlue }
    @objc dynamic public class var orange: UIColor { return Cache.orange }
    @objc dynamic public class var blue: UIColor { return Cache.blue }
    @objc dynamic public class var green: UIColor { return Cache.green }
    @objc dynamic public class var purple: UIColor { return Cache.purple }
    @objc dynamic public class var yellow: UIColor { return Cache.yellow }
    @objc dynamic public class var blackContrast: UIColor { return Cache.blackContrast }
    @objc dynamic public class var whiteContrast: UIColor { return Cache.whiteContrast }
    @objc dynamic public class var red: UIColor { return Cache.red }
    @objc dynamic public class var alternativeWhite: UIColor { return Cache.alternativeWhite }
    @objc dynamic public class var alternativeBlack: UIColor { return Cache.alternativeBlack }
    @objc dynamic public class var whiteTextField: UIColor { return Cache.whiteTextField }
    @objc dynamic public class var lightGray: UIColor { return Cache.lightGray }
    @objc dynamic public class var gray: UIColor { return Cache.gray }
    @objc dynamic public class var twitterBlue: UIColor { return Cache.twitterBlue }

    //// Drawing Methods

    @objc dynamic public class func drawMailIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 16), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 16), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 16)


        //// Color Declarations
        let fillColor6 = UIColor(red: 0.557, green: 0.557, blue: 0.576, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 24, y: 14.86))
        bezierPath.addLine(to: CGPoint(x: 24, y: 14.86))
        bezierPath.addCurve(to: CGPoint(x: 22.86, y: 16), controlPoint1: CGPoint(x: 24, y: 15.49), controlPoint2: CGPoint(x: 23.49, y: 16))
        bezierPath.addLine(to: CGPoint(x: 1.14, y: 16))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 14.86), controlPoint1: CGPoint(x: 0.51, y: 16), controlPoint2: CGPoint(x: 0, y: 15.49))
        bezierPath.addLine(to: CGPoint(x: 0, y: 0.88))
        bezierPath.addLine(to: CGPoint(x: 8.19, y: 7.1))
        bezierPath.addLine(to: CGPoint(x: 3.94, y: 11.94))
        bezierPath.addLine(to: CGPoint(x: 4.06, y: 12.06))
        bezierPath.addLine(to: CGPoint(x: 8.99, y: 7.71))
        bezierPath.addLine(to: CGPoint(x: 12, y: 10))
        bezierPath.addLine(to: CGPoint(x: 15.01, y: 7.71))
        bezierPath.addLine(to: CGPoint(x: 19.94, y: 12.06))
        bezierPath.addLine(to: CGPoint(x: 20.06, y: 11.94))
        bezierPath.addLine(to: CGPoint(x: 15.81, y: 7.1))
        bezierPath.addLine(to: CGPoint(x: 24, y: 0.86))
        bezierPath.addLine(to: CGPoint(x: 24, y: 14.86))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 23.48, y: 0))
        bezierPath.addLine(to: CGPoint(x: 12, y: 8.74))
        bezierPath.addLine(to: CGPoint(x: 0.5, y: 0))
        bezierPath.addLine(to: CGPoint(x: 23.48, y: 0))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor6.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawLockIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 19, height: 25), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 19, height: 25), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 19, y: resizedFrame.height / 25)


        //// Color Declarations
        let fillColor6 = UIColor(red: 0.557, green: 0.557, blue: 0.576, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 15.68, y: 6))
        bezierPath.addCurve(to: CGPoint(x: 9.5, y: 0), controlPoint1: CGPoint(x: 15.68, y: 2.69), controlPoint2: CGPoint(x: 12.91, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 3.33, y: 6), controlPoint1: CGPoint(x: 6.09, y: 0), controlPoint2: CGPoint(x: 3.33, y: 2.69))
        bezierPath.addLine(to: CGPoint(x: 3.33, y: 10.15))
        bezierPath.addLine(to: CGPoint(x: 1.33, y: 10.15))
        bezierPath.addLine(to: CGPoint(x: 1.33, y: 10.15))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 11.49), controlPoint1: CGPoint(x: 0.6, y: 10.15), controlPoint2: CGPoint(x: 0, y: 10.75))
        bezierPath.addLine(to: CGPoint(x: 0, y: 22.67))
        bezierPath.addLine(to: CGPoint(x: 0, y: 22.67))
        bezierPath.addCurve(to: CGPoint(x: 1.33, y: 24), controlPoint1: CGPoint(x: 0, y: 23.4), controlPoint2: CGPoint(x: 0.6, y: 24))
        bezierPath.addLine(to: CGPoint(x: 17.67, y: 24))
        bezierPath.addLine(to: CGPoint(x: 17.67, y: 24))
        bezierPath.addCurve(to: CGPoint(x: 19, y: 22.67), controlPoint1: CGPoint(x: 18.4, y: 24), controlPoint2: CGPoint(x: 19, y: 23.4))
        bezierPath.addLine(to: CGPoint(x: 19, y: 11.49))
        bezierPath.addLine(to: CGPoint(x: 19, y: 11.49))
        bezierPath.addCurve(to: CGPoint(x: 17.67, y: 10.15), controlPoint1: CGPoint(x: 19, y: 10.75), controlPoint2: CGPoint(x: 18.4, y: 10.15))
        bezierPath.addLine(to: CGPoint(x: 15.68, y: 10.15))
        bezierPath.addLine(to: CGPoint(x: 15.68, y: 6))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 9.97, y: 17.48))
        bezierPath.addLine(to: CGPoint(x: 9.97, y: 19.38))
        bezierPath.addLine(to: CGPoint(x: 9.03, y: 19.38))
        bezierPath.addLine(to: CGPoint(x: 9.03, y: 17.48))
        bezierPath.addCurve(to: CGPoint(x: 7.6, y: 15.69), controlPoint1: CGPoint(x: 8.21, y: 17.28), controlPoint2: CGPoint(x: 7.6, y: 16.55))
        bezierPath.addCurve(to: CGPoint(x: 9.5, y: 13.85), controlPoint1: CGPoint(x: 7.6, y: 14.67), controlPoint2: CGPoint(x: 8.45, y: 13.85))
        bezierPath.addCurve(to: CGPoint(x: 11.4, y: 15.69), controlPoint1: CGPoint(x: 10.55, y: 13.85), controlPoint2: CGPoint(x: 11.4, y: 14.67))
        bezierPath.addCurve(to: CGPoint(x: 9.97, y: 17.48), controlPoint1: CGPoint(x: 11.4, y: 16.55), controlPoint2: CGPoint(x: 10.79, y: 17.28))
        bezierPath.addLine(to: CGPoint(x: 9.97, y: 17.48))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 14.72, y: 10.15))
        bezierPath.addLine(to: CGPoint(x: 4.28, y: 10.15))
        bezierPath.addLine(to: CGPoint(x: 4.28, y: 6))
        bezierPath.addCurve(to: CGPoint(x: 9.5, y: 0.92), controlPoint1: CGPoint(x: 4.28, y: 3.2), controlPoint2: CGPoint(x: 6.62, y: 0.92))
        bezierPath.addCurve(to: CGPoint(x: 14.72, y: 6), controlPoint1: CGPoint(x: 12.38, y: 0.92), controlPoint2: CGPoint(x: 14.72, y: 3.2))
        bezierPath.addLine(to: CGPoint(x: 14.72, y: 10.15))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 9.5, y: 14.77))
        bezierPath.addCurve(to: CGPoint(x: 10.45, y: 15.69), controlPoint1: CGPoint(x: 10.02, y: 14.77), controlPoint2: CGPoint(x: 10.45, y: 15.18))
        bezierPath.addCurve(to: CGPoint(x: 9.5, y: 16.62), controlPoint1: CGPoint(x: 10.45, y: 16.2), controlPoint2: CGPoint(x: 10.02, y: 16.62))
        bezierPath.addCurve(to: CGPoint(x: 8.55, y: 15.69), controlPoint1: CGPoint(x: 8.98, y: 16.62), controlPoint2: CGPoint(x: 8.55, y: 16.2))
        bezierPath.addCurve(to: CGPoint(x: 9.5, y: 14.77), controlPoint1: CGPoint(x: 8.55, y: 15.18), controlPoint2: CGPoint(x: 8.98, y: 14.77))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor6.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPersonIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// Color Declarations
        let fillColor6 = UIColor(red: 0.557, green: 0.557, blue: 0.576, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 16.81, y: 19.43))
        bezierPath.addCurve(to: CGPoint(x: 15.31, y: 18.74), controlPoint1: CGPoint(x: 16.3, y: 19.32), controlPoint2: CGPoint(x: 15.55, y: 19.04))
        bezierPath.addCurve(to: CGPoint(x: 15.21, y: 15.67), controlPoint1: CGPoint(x: 15.06, y: 18.44), controlPoint2: CGPoint(x: 15.21, y: 15.67))
        bezierPath.addCurve(to: CGPoint(x: 15.92, y: 14.33), controlPoint1: CGPoint(x: 15.21, y: 15.67), controlPoint2: CGPoint(x: 15.67, y: 14.96))
        bezierPath.addCurve(to: CGPoint(x: 16.43, y: 11.97), controlPoint1: CGPoint(x: 16.16, y: 13.7), controlPoint2: CGPoint(x: 16.43, y: 11.97))
        bezierPath.addCurve(to: CGPoint(x: 17.12, y: 11.08), controlPoint1: CGPoint(x: 16.43, y: 11.97), controlPoint2: CGPoint(x: 16.94, y: 11.97))
        bezierPath.addCurve(to: CGPoint(x: 17.58, y: 8.97), controlPoint1: CGPoint(x: 17.32, y: 10.1), controlPoint2: CGPoint(x: 17.62, y: 9.7))
        bezierPath.addCurve(to: CGPoint(x: 17.15, y: 8.26), controlPoint1: CGPoint(x: 17.54, y: 8.29), controlPoint2: CGPoint(x: 17.19, y: 8.26))
        bezierPath.addCurve(to: CGPoint(x: 17.57, y: 5.08), controlPoint1: CGPoint(x: 17.15, y: 8.26), controlPoint2: CGPoint(x: 17.52, y: 7.24))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 0), controlPoint1: CGPoint(x: 17.63, y: 2.52), controlPoint2: CGPoint(x: 15.68, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 6.43, y: 5.07), controlPoint1: CGPoint(x: 8.32, y: 0), controlPoint2: CGPoint(x: 6.38, y: 2.51))
        bezierPath.addCurve(to: CGPoint(x: 6.85, y: 8.25), controlPoint1: CGPoint(x: 6.47, y: 7.22), controlPoint2: CGPoint(x: 6.85, y: 8.25))
        bezierPath.addCurve(to: CGPoint(x: 6.42, y: 8.96), controlPoint1: CGPoint(x: 6.81, y: 8.25), controlPoint2: CGPoint(x: 6.46, y: 8.29))
        bezierPath.addCurve(to: CGPoint(x: 6.88, y: 11.06), controlPoint1: CGPoint(x: 6.38, y: 9.69), controlPoint2: CGPoint(x: 6.69, y: 10.08))
        bezierPath.addCurve(to: CGPoint(x: 7.57, y: 11.95), controlPoint1: CGPoint(x: 7.06, y: 11.95), controlPoint2: CGPoint(x: 7.57, y: 11.95))
        bezierPath.addCurve(to: CGPoint(x: 8.09, y: 14.32), controlPoint1: CGPoint(x: 7.57, y: 11.95), controlPoint2: CGPoint(x: 7.84, y: 13.69))
        bezierPath.addCurve(to: CGPoint(x: 8.79, y: 15.67), controlPoint1: CGPoint(x: 8.33, y: 14.95), controlPoint2: CGPoint(x: 8.79, y: 15.67))
        bezierPath.addCurve(to: CGPoint(x: 8.69, y: 18.73), controlPoint1: CGPoint(x: 8.79, y: 15.67), controlPoint2: CGPoint(x: 8.94, y: 18.43))
        bezierPath.addCurve(to: CGPoint(x: 7.19, y: 19.42), controlPoint1: CGPoint(x: 8.45, y: 19.04), controlPoint2: CGPoint(x: 7.7, y: 19.31))
        bezierPath.addCurve(to: CGPoint(x: 3.95, y: 20.09), controlPoint1: CGPoint(x: 6.3, y: 19.62), controlPoint2: CGPoint(x: 4.92, y: 19.75))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 24), controlPoint1: CGPoint(x: 2.98, y: 20.44), controlPoint2: CGPoint(x: 0, y: 21.6))
        bezierPath.addLine(to: CGPoint(x: 12, y: 24))
        bezierPath.addLine(to: CGPoint(x: 24, y: 24))
        bezierPath.addCurve(to: CGPoint(x: 20.05, y: 20.09), controlPoint1: CGPoint(x: 24, y: 21.6), controlPoint2: CGPoint(x: 21.02, y: 20.44))
        bezierPath.addCurve(to: CGPoint(x: 16.81, y: 19.43), controlPoint1: CGPoint(x: 19.08, y: 19.75), controlPoint2: CGPoint(x: 17.69, y: 19.63))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor6.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawTwitterIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 20)


        //// Color Declarations
        let fillColor6 = UIColor(red: 0.557, green: 0.557, blue: 0.576, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 11.76, y: 6.32))
        bezierPath.addCurve(to: CGPoint(x: 14.3, y: 0.56), controlPoint1: CGPoint(x: 11.76, y: 6.32), controlPoint2: CGPoint(x: 10.49, y: 2.9))
        bezierPath.addCurve(to: CGPoint(x: 20.39, y: 1.7), controlPoint1: CGPoint(x: 14.3, y: 0.56), controlPoint2: CGPoint(x: 17.4, y: -1.28))
        bezierPath.addCurve(to: CGPoint(x: 23.36, y: 0.43), controlPoint1: CGPoint(x: 20.39, y: 1.7), controlPoint2: CGPoint(x: 21.74, y: 1.63))
        bezierPath.addCurve(to: CGPoint(x: 21.48, y: 3.32), controlPoint1: CGPoint(x: 23.36, y: 0.43), controlPoint2: CGPoint(x: 23.6, y: 1.54))
        bezierPath.addCurve(to: CGPoint(x: 24, y: 2.34), controlPoint1: CGPoint(x: 21.48, y: 3.32), controlPoint2: CGPoint(x: 22.66, y: 3.22))
        bezierPath.addCurve(to: CGPoint(x: 21.56, y: 4.98), controlPoint1: CGPoint(x: 24, y: 2.34), controlPoint2: CGPoint(x: 23.75, y: 3.87))
        bezierPath.addCurve(to: CGPoint(x: 10.54, y: 19.72), controlPoint1: CGPoint(x: 21.56, y: 4.98), controlPoint2: CGPoint(x: 22.23, y: 17.07))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 17.68), controlPoint1: CGPoint(x: 10.54, y: 19.72), controlPoint2: CGPoint(x: 4.35, y: 21.12))
        bezierPath.addCurve(to: CGPoint(x: 7.07, y: 15.56), controlPoint1: CGPoint(x: 0, y: 17.68), controlPoint2: CGPoint(x: 4.62, y: 18.16))
        bezierPath.addCurve(to: CGPoint(x: 2.48, y: 12.19), controlPoint1: CGPoint(x: 7.07, y: 15.56), controlPoint2: CGPoint(x: 3.99, y: 15.85))
        bezierPath.addCurve(to: CGPoint(x: 4.64, y: 11.95), controlPoint1: CGPoint(x: 2.48, y: 12.19), controlPoint2: CGPoint(x: 4.02, y: 12.46))
        bezierPath.addCurve(to: CGPoint(x: 0.67, y: 7.07), controlPoint1: CGPoint(x: 4.64, y: 11.95), controlPoint2: CGPoint(x: 1.4, y: 11.97))
        bezierPath.addCurve(to: CGPoint(x: 2.86, y: 7.62), controlPoint1: CGPoint(x: 0.67, y: 7.07), controlPoint2: CGPoint(x: 2, y: 7.75))
        bezierPath.addCurve(to: CGPoint(x: 1.41, y: 0.86), controlPoint1: CGPoint(x: 2.86, y: 7.62), controlPoint2: CGPoint(x: -0.81, y: 5.33))
        bezierPath.addCurve(to: CGPoint(x: 11.76, y: 6.32), controlPoint1: CGPoint(x: 1.41, y: 0.86), controlPoint2: CGPoint(x: 5.51, y: 6.01))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor6.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawFacebookIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 13, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 13, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 13, y: resizedFrame.height / 24)


        //// Color Declarations
        let fillColor6 = UIColor(red: 0.557, green: 0.557, blue: 0.576, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 3.64, y: 23.86))
        bezierPath.addLine(to: CGPoint(x: 3.64, y: 12.87))
        bezierPath.addLine(to: CGPoint(x: 0, y: 12.87))
        bezierPath.addLine(to: CGPoint(x: 0, y: 8.92))
        bezierPath.addLine(to: CGPoint(x: 3.64, y: 8.92))
        bezierPath.addLine(to: CGPoint(x: 3.64, y: 6.02))
        bezierPath.addCurve(to: CGPoint(x: 8.7, y: 0), controlPoint1: CGPoint(x: 3.64, y: 6.02), controlPoint2: CGPoint(x: 3.38, y: 0))
        bezierPath.addLine(to: CGPoint(x: 13, y: 0))
        bezierPath.addLine(to: CGPoint(x: 13, y: 4.03))
        bezierPath.addLine(to: CGPoint(x: 10.32, y: 4.03))
        bezierPath.addCurve(to: CGPoint(x: 8.33, y: 5.92), controlPoint1: CGPoint(x: 10.32, y: 4.03), controlPoint2: CGPoint(x: 8.35, y: 3.92))
        bezierPath.addLine(to: CGPoint(x: 8.33, y: 8.92))
        bezierPath.addLine(to: CGPoint(x: 12.66, y: 8.92))
        bezierPath.addLine(to: CGPoint(x: 12.04, y: 12.87))
        bezierPath.addLine(to: CGPoint(x: 8.28, y: 12.87))
        bezierPath.addLine(to: CGPoint(x: 8.28, y: 24))
        bezierPath.addLine(to: CGPoint(x: 3.64, y: 24))
        bezierPath.addLine(to: CGPoint(x: 3.64, y: 23.86))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor6.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawGoogleIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// Color Declarations
        let fillColor2 = UIColor(red: 0.918, green: 0.263, blue: 0.208, alpha: 1.000)
        let fillColor3 = UIColor(red: 0.984, green: 0.737, blue: 0.020, alpha: 1.000)
        let fillColor4 = UIColor(red: 0.259, green: 0.522, blue: 0.957, alpha: 1.000)
        let fillColor5 = UIColor(red: 0.204, green: 0.659, blue: 0.325, alpha: 1.000)

        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 8.24, y: 0.66))
        bezierPath.addCurve(to: CGPoint(x: 16.48, y: 0.73), controlPoint1: CGPoint(x: 10.88, y: -0.24), controlPoint2: CGPoint(x: 13.85, y: -0.22))
        bezierPath.addCurve(to: CGPoint(x: 20.43, y: 3.12), controlPoint1: CGPoint(x: 17.95, y: 1.26), controlPoint2: CGPoint(x: 19.28, y: 2.08))
        bezierPath.addCurve(to: CGPoint(x: 19.24, y: 4.3), controlPoint1: CGPoint(x: 20.04, y: 3.53), controlPoint2: CGPoint(x: 19.63, y: 3.91))
        bezierPath.addCurve(to: CGPoint(x: 16.98, y: 6.51), controlPoint1: CGPoint(x: 18.48, y: 5.04), controlPoint2: CGPoint(x: 17.73, y: 5.78))
        bezierPath.addCurve(to: CGPoint(x: 14.35, y: 4.99), controlPoint1: CGPoint(x: 16.24, y: 5.81), controlPoint2: CGPoint(x: 15.33, y: 5.29))
        bezierPath.addCurve(to: CGPoint(x: 10.75, y: 4.85), controlPoint1: CGPoint(x: 13.19, y: 4.65), controlPoint2: CGPoint(x: 11.94, y: 4.59))
        bezierPath.addCurve(to: CGPoint(x: 7.09, y: 6.84), controlPoint1: CGPoint(x: 9.37, y: 5.14), controlPoint2: CGPoint(x: 8.09, y: 5.85))
        bezierPath.addCurve(to: CGPoint(x: 5.32, y: 9.67), controlPoint1: CGPoint(x: 6.29, y: 7.63), controlPoint2: CGPoint(x: 5.68, y: 8.62))
        bezierPath.addCurve(to: CGPoint(x: 1.3, y: 6.62), controlPoint1: CGPoint(x: 3.98, y: 8.65), controlPoint2: CGPoint(x: 2.64, y: 7.64))
        bezierPath.addCurve(to: CGPoint(x: 8.24, y: 0.66), controlPoint1: CGPoint(x: 2.72, y: 3.85), controlPoint2: CGPoint(x: 5.26, y: 1.66))
        bezierPath.addLine(to: CGPoint(x: 8.24, y: 0.66))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor2.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 0.24, y: 9.63))
        bezier2Path.addCurve(to: CGPoint(x: 1.31, y: 6.61), controlPoint1: CGPoint(x: 0.46, y: 8.58), controlPoint2: CGPoint(x: 0.81, y: 7.56))
        bezier2Path.addCurve(to: CGPoint(x: 5.32, y: 9.66), controlPoint1: CGPoint(x: 2.64, y: 7.63), controlPoint2: CGPoint(x: 3.98, y: 8.64))
        bezier2Path.addCurve(to: CGPoint(x: 5.32, y: 14.33), controlPoint1: CGPoint(x: 4.8, y: 11.16), controlPoint2: CGPoint(x: 4.8, y: 12.84))
        bezier2Path.addCurve(to: CGPoint(x: 1.31, y: 17.38), controlPoint1: CGPoint(x: 3.99, y: 15.35), controlPoint2: CGPoint(x: 2.65, y: 16.37))
        bezier2Path.addCurve(to: CGPoint(x: 0.24, y: 9.63), controlPoint1: CGPoint(x: 0.08, y: 15.02), controlPoint2: CGPoint(x: -0.3, y: 12.24))
        bezier2Path.addLine(to: CGPoint(x: 0.24, y: 9.63))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        fillColor3.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 12.24, y: 9.75))
        bezier3Path.addLine(to: CGPoint(x: 23.76, y: 9.75))
        bezier3Path.addCurve(to: CGPoint(x: 23.45, y: 16.13), controlPoint1: CGPoint(x: 24.14, y: 11.86), controlPoint2: CGPoint(x: 24.05, y: 14.06))
        bezier3Path.addCurve(to: CGPoint(x: 20.35, y: 21.11), controlPoint1: CGPoint(x: 22.89, y: 18.02), controlPoint2: CGPoint(x: 21.83, y: 19.77))
        bezier3Path.addCurve(to: CGPoint(x: 16.46, y: 18.15), controlPoint1: CGPoint(x: 19.05, y: 20.12), controlPoint2: CGPoint(x: 17.75, y: 19.13))
        bezier3Path.addCurve(to: CGPoint(x: 18.91, y: 14.44), controlPoint1: CGPoint(x: 17.74, y: 17.3), controlPoint2: CGPoint(x: 18.65, y: 15.93))
        bezier3Path.addLine(to: CGPoint(x: 12.23, y: 14.44))
        bezier3Path.addCurve(to: CGPoint(x: 12.24, y: 9.75), controlPoint1: CGPoint(x: 12.24, y: 12.87), controlPoint2: CGPoint(x: 12.24, y: 11.31))
        bezier3Path.addLine(to: CGPoint(x: 12.24, y: 9.75))
        bezier3Path.close()
        bezier3Path.usesEvenOddFillRule = true
        fillColor4.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 1.3, y: 17.39))
        bezier4Path.addCurve(to: CGPoint(x: 5.31, y: 14.34), controlPoint1: CGPoint(x: 2.64, y: 16.38), controlPoint2: CGPoint(x: 3.97, y: 15.36))
        bezier4Path.addCurve(to: CGPoint(x: 8.11, y: 18.02), controlPoint1: CGPoint(x: 5.82, y: 15.82), controlPoint2: CGPoint(x: 6.81, y: 17.13))
        bezier4Path.addCurve(to: CGPoint(x: 10.84, y: 19.18), controlPoint1: CGPoint(x: 8.93, y: 18.59), controlPoint2: CGPoint(x: 9.86, y: 18.99))
        bezier4Path.addCurve(to: CGPoint(x: 13.76, y: 19.19), controlPoint1: CGPoint(x: 11.8, y: 19.37), controlPoint2: CGPoint(x: 12.79, y: 19.35))
        bezier4Path.addCurve(to: CGPoint(x: 16.46, y: 18.14), controlPoint1: CGPoint(x: 14.72, y: 19.02), controlPoint2: CGPoint(x: 15.65, y: 18.68))
        bezier4Path.addCurve(to: CGPoint(x: 20.35, y: 21.1), controlPoint1: CGPoint(x: 17.75, y: 19.13), controlPoint2: CGPoint(x: 19.05, y: 20.11))
        bezier4Path.addCurve(to: CGPoint(x: 15.33, y: 23.66), controlPoint1: CGPoint(x: 18.95, y: 22.37), controlPoint2: CGPoint(x: 17.19, y: 23.24))
        bezier4Path.addCurve(to: CGPoint(x: 9.07, y: 23.59), controlPoint1: CGPoint(x: 13.28, y: 24.12), controlPoint2: CGPoint(x: 11.11, y: 24.13))
        bezier4Path.addCurve(to: CGPoint(x: 4.62, y: 21.39), controlPoint1: CGPoint(x: 7.45, y: 23.17), controlPoint2: CGPoint(x: 5.93, y: 22.42))
        bezier4Path.addCurve(to: CGPoint(x: 1.3, y: 17.39), controlPoint1: CGPoint(x: 3.24, y: 20.32), controlPoint2: CGPoint(x: 2.1, y: 18.94))
        bezier4Path.addLine(to: CGPoint(x: 1.3, y: 17.39))
        bezier4Path.close()
        bezier4Path.usesEvenOddFillRule = true
        fillColor5.setFill()
        bezier4Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSearch(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 24, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 24, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 24, y: resizedFrame.height / 24)


        //// Color Declarations
        let fillColor6 = UIColor(red: 0.557, green: 0.557, blue: 0.576, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 23.56, y: 21.56))
        bezierPath.addLine(to: CGPoint(x: 16.99, y: 14.98))
        bezierPath.addCurve(to: CGPoint(x: 18.79, y: 9.44), controlPoint1: CGPoint(x: 18.17, y: 13.38), controlPoint2: CGPoint(x: 18.8, y: 11.43))
        bezierPath.addCurve(to: CGPoint(x: 9.36, y: 0), controlPoint1: CGPoint(x: 18.77, y: 4.24), controlPoint2: CGPoint(x: 14.56, y: 0.03))
        bezierPath.addCurve(to: CGPoint(x: 2.72, y: 2.73), controlPoint1: CGPoint(x: 6.87, y: -0.01), controlPoint2: CGPoint(x: 4.48, y: 0.97))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 9.37), controlPoint1: CGPoint(x: 0.97, y: 4.49), controlPoint2: CGPoint(x: -0.01, y: 6.89))
        bezierPath.addCurve(to: CGPoint(x: 9.43, y: 18.82), controlPoint1: CGPoint(x: 0.02, y: 14.57), controlPoint2: CGPoint(x: 4.23, y: 18.79))
        bezierPath.addCurve(to: CGPoint(x: 14.99, y: 17), controlPoint1: CGPoint(x: 11.43, y: 18.83), controlPoint2: CGPoint(x: 13.38, y: 18.19))
        bezierPath.addLine(to: CGPoint(x: 14.99, y: 16.99))
        bezierPath.addLine(to: CGPoint(x: 21.56, y: 23.56))
        bezierPath.addCurve(to: CGPoint(x: 22.94, y: 23.95), controlPoint1: CGPoint(x: 21.91, y: 23.93), controlPoint2: CGPoint(x: 22.44, y: 24.08))
        bezierPath.addCurve(to: CGPoint(x: 23.95, y: 22.94), controlPoint1: CGPoint(x: 23.44, y: 23.83), controlPoint2: CGPoint(x: 23.83, y: 23.44))
        bezierPath.addCurve(to: CGPoint(x: 23.56, y: 21.56), controlPoint1: CGPoint(x: 24.08, y: 22.44), controlPoint2: CGPoint(x: 23.93, y: 21.91))
        bezierPath.addLine(to: CGPoint(x: 23.56, y: 21.56))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 9.42, y: 16.93))
        bezierPath.addCurve(to: CGPoint(x: 1.88, y: 9.38), controlPoint1: CGPoint(x: 5.26, y: 16.91), controlPoint2: CGPoint(x: 1.9, y: 13.54))
        bezierPath.addCurve(to: CGPoint(x: 4.06, y: 4.07), controlPoint1: CGPoint(x: 1.87, y: 7.39), controlPoint2: CGPoint(x: 2.65, y: 5.48))
        bezierPath.addCurve(to: CGPoint(x: 9.37, y: 1.88), controlPoint1: CGPoint(x: 5.47, y: 2.66), controlPoint2: CGPoint(x: 7.38, y: 1.87))
        bezierPath.addCurve(to: CGPoint(x: 16.91, y: 9.44), controlPoint1: CGPoint(x: 13.53, y: 1.91), controlPoint2: CGPoint(x: 16.89, y: 5.28))
        bezierPath.addCurve(to: CGPoint(x: 14.73, y: 14.75), controlPoint1: CGPoint(x: 16.92, y: 11.43), controlPoint2: CGPoint(x: 16.14, y: 13.34))
        bezierPath.addCurve(to: CGPoint(x: 9.42, y: 16.93), controlPoint1: CGPoint(x: 13.32, y: 16.16), controlPoint2: CGPoint(x: 11.41, y: 16.94))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor6.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawArrowDown(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 37, height: 12), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 37, height: 12), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 37, y: resizedFrame.height / 12)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 18.62, y: 6.63))
        bezierPath.addLine(to: CGPoint(x: 3.6, y: 0.25))
        bezierPath.addCurve(to: CGPoint(x: 0.21, y: 1.62), controlPoint1: CGPoint(x: 2.28, y: -0.3), controlPoint2: CGPoint(x: 0.77, y: 0.31))
        bezierPath.addCurve(to: CGPoint(x: 1.58, y: 5.01), controlPoint1: CGPoint(x: -0.35, y: 2.95), controlPoint2: CGPoint(x: 0.26, y: 4.45))
        bezierPath.addLine(to: CGPoint(x: 17.2, y: 11.64))
        bezierPath.addCurve(to: CGPoint(x: 18.06, y: 11.84), controlPoint1: CGPoint(x: 17.48, y: 11.76), controlPoint2: CGPoint(x: 17.77, y: 11.83))
        bezierPath.addCurve(to: CGPoint(x: 19.8, y: 11.75), controlPoint1: CGPoint(x: 18.62, y: 12.01), controlPoint2: CGPoint(x: 19.23, y: 11.99))
        bezierPath.addLine(to: CGPoint(x: 35.43, y: 5.11))
        bezierPath.addCurve(to: CGPoint(x: 36.8, y: 1.73), controlPoint1: CGPoint(x: 36.74, y: 4.56), controlPoint2: CGPoint(x: 37.36, y: 3.05))
        bezierPath.addCurve(to: CGPoint(x: 33.41, y: 0.36), controlPoint1: CGPoint(x: 36.24, y: 0.41), controlPoint2: CGPoint(x: 34.72, y: -0.2))
        bezierPath.addLine(to: CGPoint(x: 18.62, y: 6.63))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        SFAssets.gray.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCloseIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 10, height: 10), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 10, height: 10), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 10, y: resizedFrame.height / 10)


        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 6.45, y: 5))
        clipPath.addLine(to: CGPoint(x: 9.7, y: 1.75))
        clipPath.addCurve(to: CGPoint(x: 9.7, y: 0.3), controlPoint1: CGPoint(x: 10.1, y: 1.35), controlPoint2: CGPoint(x: 10.1, y: 0.7))
        clipPath.addLine(to: CGPoint(x: 9.7, y: 0.3))
        clipPath.addLine(to: CGPoint(x: 9.7, y: 0.3))
        clipPath.addCurve(to: CGPoint(x: 8.25, y: 0.3), controlPoint1: CGPoint(x: 9.3, y: -0.1), controlPoint2: CGPoint(x: 8.65, y: -0.1))
        clipPath.addLine(to: CGPoint(x: 8.25, y: 0.3))
        clipPath.addLine(to: CGPoint(x: 5, y: 3.55))
        clipPath.addLine(to: CGPoint(x: 1.75, y: 0.3))
        clipPath.addCurve(to: CGPoint(x: 0.3, y: 0.3), controlPoint1: CGPoint(x: 1.35, y: -0.1), controlPoint2: CGPoint(x: 0.7, y: -0.1))
        clipPath.addLine(to: CGPoint(x: 0.3, y: 0.3))
        clipPath.addLine(to: CGPoint(x: 0.3, y: 0.3))
        clipPath.addCurve(to: CGPoint(x: 0.3, y: 1.75), controlPoint1: CGPoint(x: -0.1, y: 0.7), controlPoint2: CGPoint(x: -0.1, y: 1.35))
        clipPath.addLine(to: CGPoint(x: 0.3, y: 1.75))
        clipPath.addLine(to: CGPoint(x: 3.55, y: 5))
        clipPath.addLine(to: CGPoint(x: 0.3, y: 8.25))
        clipPath.addCurve(to: CGPoint(x: 0.3, y: 9.7), controlPoint1: CGPoint(x: -0.1, y: 8.65), controlPoint2: CGPoint(x: -0.1, y: 9.3))
        clipPath.addLine(to: CGPoint(x: 0.3, y: 9.7))
        clipPath.addCurve(to: CGPoint(x: 1.75, y: 9.7), controlPoint1: CGPoint(x: 0.7, y: 10.1), controlPoint2: CGPoint(x: 1.35, y: 10.1))
        clipPath.addLine(to: CGPoint(x: 5, y: 6.45))
        clipPath.addLine(to: CGPoint(x: 8.25, y: 9.7))
        clipPath.addCurve(to: CGPoint(x: 9.7, y: 9.7), controlPoint1: CGPoint(x: 8.65, y: 10.1), controlPoint2: CGPoint(x: 9.3, y: 10.1))
        clipPath.addLine(to: CGPoint(x: 9.7, y: 9.7))
        clipPath.addCurve(to: CGPoint(x: 9.7, y: 8.25), controlPoint1: CGPoint(x: 10.1, y: 9.3), controlPoint2: CGPoint(x: 10.1, y: 8.65))
        clipPath.addLine(to: CGPoint(x: 9.7, y: 8.25))
        clipPath.addLine(to: CGPoint(x: 6.45, y: 5))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()


        //// Picture Drawing
        context.saveGState()
        context.translateBy(x: 0, y: 10)
        context.scaleBy(x: 0.83, y: -0.83)

        let picturePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 12, height: 12))
        SFAssets.gray.setFill()
        picturePath.fill()

        context.restoreGState()


        context.endTransparencyLayer()
        context.restoreGState()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 6.45, y: 5))
        bezier2Path.addLine(to: CGPoint(x: 9.7, y: 1.75))
        bezier2Path.addCurve(to: CGPoint(x: 9.7, y: 0.3), controlPoint1: CGPoint(x: 10.1, y: 1.35), controlPoint2: CGPoint(x: 10.1, y: 0.7))
        bezier2Path.addLine(to: CGPoint(x: 9.7, y: 0.3))
        bezier2Path.addLine(to: CGPoint(x: 9.7, y: 0.3))
        bezier2Path.addCurve(to: CGPoint(x: 8.25, y: 0.3), controlPoint1: CGPoint(x: 9.3, y: -0.1), controlPoint2: CGPoint(x: 8.65, y: -0.1))
        bezier2Path.addLine(to: CGPoint(x: 8.25, y: 0.3))
        bezier2Path.addLine(to: CGPoint(x: 5, y: 3.55))
        bezier2Path.addLine(to: CGPoint(x: 1.75, y: 0.3))
        bezier2Path.addCurve(to: CGPoint(x: 0.3, y: 0.3), controlPoint1: CGPoint(x: 1.35, y: -0.1), controlPoint2: CGPoint(x: 0.7, y: -0.1))
        bezier2Path.addLine(to: CGPoint(x: 0.3, y: 0.3))
        bezier2Path.addLine(to: CGPoint(x: 0.3, y: 0.3))
        bezier2Path.addCurve(to: CGPoint(x: 0.3, y: 1.75), controlPoint1: CGPoint(x: -0.1, y: 0.7), controlPoint2: CGPoint(x: -0.1, y: 1.35))
        bezier2Path.addLine(to: CGPoint(x: 0.3, y: 1.75))
        bezier2Path.addLine(to: CGPoint(x: 3.55, y: 5))
        bezier2Path.addLine(to: CGPoint(x: 0.3, y: 8.25))
        bezier2Path.addCurve(to: CGPoint(x: 0.3, y: 9.7), controlPoint1: CGPoint(x: -0.1, y: 8.65), controlPoint2: CGPoint(x: -0.1, y: 9.3))
        bezier2Path.addLine(to: CGPoint(x: 0.3, y: 9.7))
        bezier2Path.addCurve(to: CGPoint(x: 1.75, y: 9.7), controlPoint1: CGPoint(x: 0.7, y: 10.1), controlPoint2: CGPoint(x: 1.35, y: 10.1))
        bezier2Path.addLine(to: CGPoint(x: 5, y: 6.45))
        bezier2Path.addLine(to: CGPoint(x: 8.25, y: 9.7))
        bezier2Path.addCurve(to: CGPoint(x: 9.7, y: 9.7), controlPoint1: CGPoint(x: 8.65, y: 10.1), controlPoint2: CGPoint(x: 9.3, y: 10.1))
        bezier2Path.addLine(to: CGPoint(x: 9.7, y: 9.7))
        bezier2Path.addCurve(to: CGPoint(x: 9.7, y: 8.25), controlPoint1: CGPoint(x: 10.1, y: 9.3), controlPoint2: CGPoint(x: 10.1, y: 8.65))
        bezier2Path.addLine(to: CGPoint(x: 9.7, y: 8.25))
        bezier2Path.addLine(to: CGPoint(x: 6.45, y: 5))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        SFAssets.gray.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCameraIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 24), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 24), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 24)


        //// Color Declarations
        let fillColor6 = UIColor(red: 0.557, green: 0.557, blue: 0.576, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 29.46, y: 4))
        bezierPath.addLine(to: CGPoint(x: 24.32, y: 4))
        bezierPath.addCurve(to: CGPoint(x: 19.78, y: 0), controlPoint1: CGPoint(x: 21.64, y: 1), controlPoint2: CGPoint(x: 20.8, y: 0))
        bezierPath.addLine(to: CGPoint(x: 12.4, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 7.86, y: 4), controlPoint1: CGPoint(x: 11.38, y: 0), controlPoint2: CGPoint(x: 10.55, y: 1))
        bezierPath.addLine(to: CGPoint(x: 6.75, y: 4))
        bezierPath.addLine(to: CGPoint(x: 6.75, y: 2.67))
        bezierPath.addLine(to: CGPoint(x: 3.92, y: 2.67))
        bezierPath.addLine(to: CGPoint(x: 3.92, y: 4))
        bezierPath.addLine(to: CGPoint(x: 2.79, y: 4))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 6.56), controlPoint1: CGPoint(x: 1.32, y: 4), controlPoint2: CGPoint(x: 0, y: 5.1))
        bezierPath.addLine(to: CGPoint(x: 0, y: 21.22))
        bezierPath.addCurve(to: CGPoint(x: 2.79, y: 24), controlPoint1: CGPoint(x: 0, y: 22.68), controlPoint2: CGPoint(x: 1.32, y: 24))
        bezierPath.addLine(to: CGPoint(x: 29.46, y: 24))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 21.22), controlPoint1: CGPoint(x: 30.93, y: 24), controlPoint2: CGPoint(x: 32, y: 22.68))
        bezierPath.addLine(to: CGPoint(x: 32, y: 6.56))
        bezierPath.addCurve(to: CGPoint(x: 29.46, y: 4), controlPoint1: CGPoint(x: 32, y: 5.1), controlPoint2: CGPoint(x: 30.93, y: 4))
        bezierPath.addLine(to: CGPoint(x: 29.46, y: 4))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 16, y: 20.71))
        bezierPath.addCurve(to: CGPoint(x: 8.88, y: 13.58), controlPoint1: CGPoint(x: 12.08, y: 20.71), controlPoint2: CGPoint(x: 8.88, y: 17.51))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 6.46), controlPoint1: CGPoint(x: 8.88, y: 9.66), controlPoint2: CGPoint(x: 12.08, y: 6.46))
        bezierPath.addCurve(to: CGPoint(x: 23.12, y: 13.58), controlPoint1: CGPoint(x: 19.93, y: 6.46), controlPoint2: CGPoint(x: 23.12, y: 9.66))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 20.71), controlPoint1: CGPoint(x: 23.12, y: 17.51), controlPoint2: CGPoint(x: 19.93, y: 20.71))
        bezierPath.addLine(to: CGPoint(x: 16, y: 20.71))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 25.42, y: 8.08))
        bezierPath.addLine(to: CGPoint(x: 24, y: 8.08))
        bezierPath.addLine(to: CGPoint(x: 24, y: 6.67))
        bezierPath.addLine(to: CGPoint(x: 25.42, y: 6.67))
        bezierPath.addLine(to: CGPoint(x: 25.42, y: 8.08))
        bezierPath.addLine(to: CGPoint(x: 25.42, y: 8.08))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor6.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 16, y: 7.79))
        bezier2Path.addCurve(to: CGPoint(x: 10.21, y: 13.58), controlPoint1: CGPoint(x: 12.8, y: 7.79), controlPoint2: CGPoint(x: 10.21, y: 10.38))
        bezier2Path.addCurve(to: CGPoint(x: 16, y: 19.38), controlPoint1: CGPoint(x: 10.21, y: 16.78), controlPoint2: CGPoint(x: 12.8, y: 19.38))
        bezier2Path.addCurve(to: CGPoint(x: 21.79, y: 13.58), controlPoint1: CGPoint(x: 19.2, y: 19.38), controlPoint2: CGPoint(x: 21.79, y: 16.78))
        bezier2Path.addCurve(to: CGPoint(x: 16, y: 7.79), controlPoint1: CGPoint(x: 21.79, y: 10.38), controlPoint2: CGPoint(x: 19.2, y: 7.79))
        bezier2Path.addLine(to: CGPoint(x: 16, y: 7.79))
        bezier2Path.close()
        bezier2Path.move(to: CGPoint(x: 16, y: 16.25))
        bezier2Path.addCurve(to: CGPoint(x: 13.33, y: 13.58), controlPoint1: CGPoint(x: 14.53, y: 16.25), controlPoint2: CGPoint(x: 13.33, y: 15.06))
        bezier2Path.addCurve(to: CGPoint(x: 16, y: 10.92), controlPoint1: CGPoint(x: 13.33, y: 12.11), controlPoint2: CGPoint(x: 14.53, y: 10.92))
        bezier2Path.addCurve(to: CGPoint(x: 18.67, y: 13.58), controlPoint1: CGPoint(x: 17.48, y: 10.92), controlPoint2: CGPoint(x: 18.67, y: 12.11))
        bezier2Path.addCurve(to: CGPoint(x: 16, y: 16.25), controlPoint1: CGPoint(x: 18.67, y: 15.06), controlPoint2: CGPoint(x: 17.48, y: 16.25))
        bezier2Path.addLine(to: CGPoint(x: 16, y: 16.25))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        fillColor6.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class var imageOfMailIcon: UIImage {
        if Cache.imageOfMailIcon != nil {
            return Cache.imageOfMailIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 16), false, 0)
            SFAssets.drawMailIcon()

        Cache.imageOfMailIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfMailIcon!
    }

    @objc dynamic public class var imageOfLockIcon: UIImage {
        if Cache.imageOfLockIcon != nil {
            return Cache.imageOfLockIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 19, height: 25), false, 0)
            SFAssets.drawLockIcon()

        Cache.imageOfLockIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfLockIcon!
    }

    @objc dynamic public class var imageOfPersonIcon: UIImage {
        if Cache.imageOfPersonIcon != nil {
            return Cache.imageOfPersonIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            SFAssets.drawPersonIcon()

        Cache.imageOfPersonIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfPersonIcon!
    }

    @objc dynamic public class var imageOfTwitterIcon: UIImage {
        if Cache.imageOfTwitterIcon != nil {
            return Cache.imageOfTwitterIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 20), false, 0)
            SFAssets.drawTwitterIcon()

        Cache.imageOfTwitterIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfTwitterIcon!
    }

    @objc dynamic public class var imageOfFacebookIcon: UIImage {
        if Cache.imageOfFacebookIcon != nil {
            return Cache.imageOfFacebookIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 13, height: 24), false, 0)
            SFAssets.drawFacebookIcon()

        Cache.imageOfFacebookIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfFacebookIcon!
    }

    @objc dynamic public class var imageOfGoogleIcon: UIImage {
        if Cache.imageOfGoogleIcon != nil {
            return Cache.imageOfGoogleIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            SFAssets.drawGoogleIcon()

        Cache.imageOfGoogleIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfGoogleIcon!
    }

    @objc dynamic public class var imageOfSearch: UIImage {
        if Cache.imageOfSearch != nil {
            return Cache.imageOfSearch!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 24, height: 24), false, 0)
            SFAssets.drawSearch()

        Cache.imageOfSearch = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSearch!
    }

    @objc dynamic public class var imageOfArrowDown: UIImage {
        if Cache.imageOfArrowDown != nil {
            return Cache.imageOfArrowDown!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 37, height: 12), false, 0)
            SFAssets.drawArrowDown()

        Cache.imageOfArrowDown = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfArrowDown!
    }

    @objc dynamic public class var imageOfCloseIcon: UIImage {
        if Cache.imageOfCloseIcon != nil {
            return Cache.imageOfCloseIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 10, height: 10), false, 0)
            SFAssets.drawCloseIcon()

        Cache.imageOfCloseIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCloseIcon!
    }

    @objc dynamic public class var imageOfCameraIcon: UIImage {
        if Cache.imageOfCameraIcon != nil {
            return Cache.imageOfCameraIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 24), false, 0)
            SFAssets.drawCameraIcon()

        Cache.imageOfCameraIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCameraIcon!
    }

    //// Customization Infrastructure

    @objc @IBOutlet dynamic var mailIconTargets: [AnyObject]! {
        get { return Cache.mailIconTargets }
        set {
            Cache.mailIconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: SFAssets.imageOfMailIcon)
            }
        }
    }

    @objc @IBOutlet dynamic var lockIconTargets: [AnyObject]! {
        get { return Cache.lockIconTargets }
        set {
            Cache.lockIconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: SFAssets.imageOfLockIcon)
            }
        }
    }

    @objc @IBOutlet dynamic var personIconTargets: [AnyObject]! {
        get { return Cache.personIconTargets }
        set {
            Cache.personIconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: SFAssets.imageOfPersonIcon)
            }
        }
    }

    @objc @IBOutlet dynamic var twitterIconTargets: [AnyObject]! {
        get { return Cache.twitterIconTargets }
        set {
            Cache.twitterIconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: SFAssets.imageOfTwitterIcon)
            }
        }
    }

    @objc @IBOutlet dynamic var facebookIconTargets: [AnyObject]! {
        get { return Cache.facebookIconTargets }
        set {
            Cache.facebookIconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: SFAssets.imageOfFacebookIcon)
            }
        }
    }

    @objc @IBOutlet dynamic var googleIconTargets: [AnyObject]! {
        get { return Cache.googleIconTargets }
        set {
            Cache.googleIconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: SFAssets.imageOfGoogleIcon)
            }
        }
    }

    @objc @IBOutlet dynamic var searchTargets: [AnyObject]! {
        get { return Cache.searchTargets }
        set {
            Cache.searchTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: SFAssets.imageOfSearch)
            }
        }
    }

    @objc @IBOutlet dynamic var arrowDownTargets: [AnyObject]! {
        get { return Cache.arrowDownTargets }
        set {
            Cache.arrowDownTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: SFAssets.imageOfArrowDown)
            }
        }
    }

    @objc @IBOutlet dynamic var closeIconTargets: [AnyObject]! {
        get { return Cache.closeIconTargets }
        set {
            Cache.closeIconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: SFAssets.imageOfCloseIcon)
            }
        }
    }

    @objc @IBOutlet dynamic var cameraIconTargets: [AnyObject]! {
        get { return Cache.cameraIconTargets }
        set {
            Cache.cameraIconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: SFAssets.imageOfCameraIcon)
            }
        }
    }




    @objc(SFAssetsResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
